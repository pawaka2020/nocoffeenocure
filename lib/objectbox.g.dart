// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/bannernews.dart';
import 'models/cartitem.dart';
import 'models/fullnews.dart';
import 'models/menuitem.dart';
import 'models/order.dart';
import 'models/user.dart';
import 'models/voucher.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(5, 2233927649910431469),
      name: 'FullNewsOB',
      lastPropertyId: const IdUid(2, 7715956713455378040),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6188503905232759776),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7715956713455378040),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5510275982018042304),
      name: 'BannerNewsOB',
      lastPropertyId: const IdUid(3, 5105894957054602084),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1428098114543984777),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1462186012595256539),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5105894957054602084),
            name: 'article',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8520225248177609433),
      name: 'AdditionDetailOB',
      lastPropertyId: const IdUid(4, 8835554883321975355),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7447594663688936812),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1554850855461411695),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5162454649465947450),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8835554883321975355),
            name: 'additionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6399289456110412113),
            relationTarget: 'AdditionOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 7833806798342725161),
      name: 'AdditionOB',
      lastPropertyId: const IdUid(5, 8793101266284054583),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5725147911301061928),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9209705376093723719),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6903636301366207274),
            name: 'selectedPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 660055670441986083),
            name: 'menuItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 9149820165032547205),
            relationTarget: 'MenuItemOB'),
        ModelProperty(
            id: const IdUid(5, 8793101266284054583),
            name: 'selectedIndex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'additionDetails',
            srcEntity: 'AdditionDetailOB',
            srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(9, 3725869045066890860),
      name: 'IngredientOB',
      lastPropertyId: const IdUid(4, 5241177170435113868),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5636916387655438282),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2123898016131721823),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4074765776421269074),
            name: 'imagePath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5241177170435113868),
            name: 'menuItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3539021135857203128),
            relationTarget: 'MenuItemOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2706068186038482142),
      name: 'MenuItemOB',
      lastPropertyId: const IdUid(10, 3605565198160151343),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3968308799936506832),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6934498969459973799),
            name: 'imagePath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7484307875708624359),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5084564747788596945),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8669383043965553925),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2937418500178822669),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 380297471824909108),
            name: 'available',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3605565198160151343),
            name: 'cartItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 6218316149259164835),
            relationTarget: 'CartItemOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'userReviews', srcEntity: 'UserReviewOB', srcField: ''),
        ModelBacklink(name: 'additions', srcEntity: 'AdditionOB', srcField: ''),
        ModelBacklink(
            name: 'ingredients', srcEntity: 'IngredientOB', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 2564477860352583731),
      name: 'UserReviewOB',
      lastPropertyId: const IdUid(5, 388836284630429389),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7496314304006346298),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4068407573045791850),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7119787009544846742),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 568488990683770149),
            name: 'stars',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 388836284630429389),
            name: 'menuItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 1668199129613032845),
            relationTarget: 'MenuItemOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 1006185654449316480),
      name: 'CartItemOB',
      lastPropertyId: const IdUid(11, 8678586329167081701),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 607542634026497203),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8956817120214946804),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4707725828917944486),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7792100973053689060),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4830930863182247232),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3322425435458119493),
            name: 'menuItem_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2168617179162901087),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2175241338504207429),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 4887777392783150537),
            relationTarget: 'OrderOB'),
        ModelProperty(
            id: const IdUid(11, 8678586329167081701),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 3574927397556316278),
            relationTarget: 'UserOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'menuItemOB', srcEntity: 'MenuItemOB', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(17, 8024934109289736930),
      name: 'VoucherOB',
      lastPropertyId: const IdUid(13, 4838735645035575023),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2682460253525748060),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2770601193349403257),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 250808917950605590),
            name: 'priceDeduct',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8174651932668460398),
            name: 'expiryDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7128996266376415974),
            name: 'activated',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7914782462890144178),
            name: 'priceDiscount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1438653914114026355),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 8026949474052666557),
            relationTarget: 'UserOB'),
        ModelProperty(
            id: const IdUid(12, 2025024905402711402),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 855284375073292395),
            relationTarget: 'OrderOB'),
        ModelProperty(
            id: const IdUid(13, 4838735645035575023),
            name: 'voucher_id',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 894287139824345925),
      name: 'OrderOB',
      lastPropertyId: const IdUid(25, 750862704918247180),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6569334852921062188),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7252095066857705921),
            name: 'orderId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3939607138348557143),
            name: 'eta',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8536933428330670500),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 341510995103447512),
            name: 'locationLongitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3708257406920850226),
            name: 'locationLatitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5768616073443887213),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7182880521418299565),
            name: 'deliveryAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5528799804993733421),
            name: 'onSitePickup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1920845847731351459),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 4194775984416843370),
            relationTarget: 'UserOB'),
        ModelProperty(
            id: const IdUid(11, 1770077229146406988),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5392808353674183885),
            name: 'specialRequest',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4574324040476023871),
            name: 'packageString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8553214042705826470),
            name: 'orderPlaced',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4592725279212508534),
            name: 'paymentMethod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3110067079694454244),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 96802594400191180),
            name: 'sst',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7490591012195810945),
            name: 'voucherDeduction',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3923099890212011569),
            name: 'subtotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4620839665897857527),
            name: 'deliveryFee',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1461558863722286894),
            name: 'roundingAdjustment',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7582011488822259852),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8700584188040987799),
            name: 'appWalletDiscount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'cartItems', srcEntity: 'CartItemOB', srcField: ''),
        ModelBacklink(name: 'vouchers', srcEntity: 'VoucherOB', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(22, 5302879394691121557),
      name: 'UserOB',
      lastPropertyId: const IdUid(14, 8908450750083107410),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1730973907303744519),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8193253317674972640),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1505167286862826768),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1444465168141315392),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6505783780621034591),
            name: 'birthday',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3579661751333407088),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4269190105807531042),
            name: 'profileImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5237903220829767417),
            name: 'coins',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3604708473021510924),
            name: 'guest',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2371229402725387636),
            name: 'isLoggedIn',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2517427027947222361),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5829590647862749672),
            name: 'newUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2297897574411327433),
            name: 'setDefaultAddress',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'reviews', srcEntity: 'UserReview2OB', srcField: ''),
        ModelBacklink(name: 'orders', srcEntity: 'OrderOB', srcField: ''),
        ModelBacklink(name: 'vouchers', srcEntity: 'VoucherOB', srcField: ''),
        ModelBacklink(name: 'cartItems', srcEntity: 'CartItemOB', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(23, 6180815482110331163),
      name: 'UserReview2OB',
      lastPropertyId: const IdUid(5, 4454006953809070021),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3701563915608125595),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3994297037497051764),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3024624892324876142),
            name: 'stars',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3169018883723215242),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4454006953809070021),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 6758416861336710766),
            relationTarget: 'UserOB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(23, 6180815482110331163),
      lastIndexId: const IdUid(22, 3574927397556316278),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2203044326659519525,
        7436886197857190181,
        1629771521425256600,
        2897391873509332869,
        3833050479341648882,
        6271963573804352264,
        6749911841847507853,
        755040416761839102,
        4530192993071638560,
        1078667474729755585,
        6064446509916367692
      ],
      retiredIndexUids: const [
        8717456330994247813,
        25080071583396621,
        5804734188308448853,
        3033352460847545794,
        2035166375975082046,
        8543830084600779176,
        1652763991564368094
      ],
      retiredPropertyUids: const [
        3504729010156614603,
        3048272364630595352,
        5532487186583170030,
        4993169361151491599,
        1715983393606849435,
        5899158864016677619,
        3215544481237852102,
        100303502472173014,
        4654279378717876603,
        6678729505156874727,
        5071892958926488448,
        7884979855067482469,
        7429239753616127297,
        5639624088004575433,
        3307856776703096138,
        6041882886099907544,
        8859555464405278357,
        6046988613028087476,
        1398901508034614234,
        4990317961778830372,
        7440020238711035706,
        1559631669320103970,
        5461736064610447156,
        6540512523523767474,
        4815532763688013353,
        6326357589974304834,
        5764899181912741906,
        1961751733340565930,
        3794642363970175032,
        6669303306245559547,
        5141375944316396741,
        383743847163415760,
        1057079585257430136,
        843305828425272101,
        1479696386852182766,
        8329618371624587469,
        352696961669626703,
        745896767734292193,
        6382646692716196750,
        1772969239402912101,
        1699615406421456723,
        653484881005465406,
        6214153821840455891,
        301378820354053017,
        4311487514591848774,
        7666468359027592032,
        5026814509820478210,
        6223603823253459524,
        4982496298708514632,
        5816247544800360042,
        288926490441761823,
        6199814512664527826,
        1546320062219839674,
        7723157659364113340,
        750862704918247180,
        8745156916931656254,
        1614979557165057070,
        2734293094508751276,
        4369116351569210447,
        2272607414657403014,
        8908450750083107410
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FullNewsOB: EntityDefinition<FullNewsOB>(
        model: _entities[0],
        toOneRelations: (FullNewsOB object) => [],
        toManyRelations: (FullNewsOB object) => {},
        getId: (FullNewsOB object) => object.id,
        setId: (FullNewsOB object, int id) {
          object.id = id;
        },
        objectToFB: (FullNewsOB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FullNewsOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    BannerNewsOB: EntityDefinition<BannerNewsOB>(
        model: _entities[1],
        toOneRelations: (BannerNewsOB object) => [],
        toManyRelations: (BannerNewsOB object) => {},
        getId: (BannerNewsOB object) => object.id,
        setId: (BannerNewsOB object, int id) {
          object.id = id;
        },
        objectToFB: (BannerNewsOB object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, articleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BannerNewsOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..article = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    AdditionDetailOB: EntityDefinition<AdditionDetailOB>(
        model: _entities[2],
        toOneRelations: (AdditionDetailOB object) => [object.addition],
        toManyRelations: (AdditionDetailOB object) => {},
        getId: (AdditionDetailOB object) => object.id,
        setId: (AdditionDetailOB object, int id) {
          object.id = id;
        },
        objectToFB: (AdditionDetailOB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addInt64(3, object.addition.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdditionDetailOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..price = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8);
          object.addition.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.addition.attach(store);
          return object;
        }),
    AdditionOB: EntityDefinition<AdditionOB>(
        model: _entities[3],
        toOneRelations: (AdditionOB object) => [object.menuItem],
        toManyRelations: (AdditionOB object) => {
              RelInfo<AdditionDetailOB>.toOneBacklink(4, object.id,
                      (AdditionDetailOB srcObject) => srcObject.addition):
                  object.additionDetails
            },
        getId: (AdditionOB object) => object.id,
        setId: (AdditionOB object, int id) {
          object.id = id;
        },
        objectToFB: (AdditionOB object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addFloat64(2, object.selectedPrice);
          fbb.addInt64(3, object.menuItem.targetId);
          fbb.addInt64(4, object.selectedIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdditionOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..selectedPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..selectedIndex = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 12);
          object.menuItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.menuItem.attach(store);
          InternalToManyAccess.setRelInfo<AdditionOB>(
              object.additionDetails,
              store,
              RelInfo<AdditionDetailOB>.toOneBacklink(4, object.id,
                  (AdditionDetailOB srcObject) => srcObject.addition));
          return object;
        }),
    IngredientOB: EntityDefinition<IngredientOB>(
        model: _entities[4],
        toOneRelations: (IngredientOB object) => [object.menuItem],
        toManyRelations: (IngredientOB object) => {},
        getId: (IngredientOB object) => object.id,
        setId: (IngredientOB object, int id) {
          object.id = id;
        },
        objectToFB: (IngredientOB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, imagePathOffset);
          fbb.addInt64(3, object.menuItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = IngredientOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..imagePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);
          object.menuItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.menuItem.attach(store);
          return object;
        }),
    MenuItemOB: EntityDefinition<MenuItemOB>(
        model: _entities[5],
        toOneRelations: (MenuItemOB object) => [object.cartItem],
        toManyRelations: (MenuItemOB object) => {
              RelInfo<UserReviewOB>.toOneBacklink(5, object.id,
                      (UserReviewOB srcObject) => srcObject.menuItem):
                  object.userReviews,
              RelInfo<AdditionOB>.toOneBacklink(4, object.id,
                      (AdditionOB srcObject) => srcObject.menuItem):
                  object.additions,
              RelInfo<IngredientOB>.toOneBacklink(4, object.id,
                      (IngredientOB srcObject) => srcObject.menuItem):
                  object.ingredients
            },
        getId: (MenuItemOB object) => object.id,
        setId: (MenuItemOB object, int id) {
          object.id = id;
        },
        objectToFB: (MenuItemOB object, fb.Builder fbb) {
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagePathOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, categoryOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addBool(6, object.available);
          fbb.addInt64(9, object.cartItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MenuItemOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..imagePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..price = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..category = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..available =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          object.cartItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.cartItem.attach(store);
          InternalToManyAccess.setRelInfo<MenuItemOB>(
              object.userReviews,
              store,
              RelInfo<UserReviewOB>.toOneBacklink(5, object.id,
                  (UserReviewOB srcObject) => srcObject.menuItem));
          InternalToManyAccess.setRelInfo<MenuItemOB>(
              object.additions,
              store,
              RelInfo<AdditionOB>.toOneBacklink(
                  4, object.id, (AdditionOB srcObject) => srcObject.menuItem));
          InternalToManyAccess.setRelInfo<MenuItemOB>(
              object.ingredients,
              store,
              RelInfo<IngredientOB>.toOneBacklink(4, object.id,
                  (IngredientOB srcObject) => srcObject.menuItem));
          return object;
        }),
    UserReviewOB: EntityDefinition<UserReviewOB>(
        model: _entities[6],
        toOneRelations: (UserReviewOB object) => [object.menuItem],
        toManyRelations: (UserReviewOB object) => {},
        getId: (UserReviewOB object) => object.id,
        setId: (UserReviewOB object, int id) {
          object.id = id;
        },
        objectToFB: (UserReviewOB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addInt64(3, object.stars);
          fbb.addInt64(4, object.menuItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserReviewOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..message = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..stars = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 10);
          object.menuItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.menuItem.attach(store);
          return object;
        }),
    CartItemOB: EntityDefinition<CartItemOB>(
        model: _entities[7],
        toOneRelations: (CartItemOB object) => [object.order, object.user],
        toManyRelations: (CartItemOB object) => {
              RelInfo<MenuItemOB>.toOneBacklink(10, object.id,
                      (MenuItemOB srcObject) => srcObject.cartItem):
                  object.menuItemOB
            },
        getId: (CartItemOB object) => object.id,
        setId: (CartItemOB object, int id) {
          object.id = id;
        },
        objectToFB: (CartItemOB object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, contentOffset);
          fbb.addInt64(4, object.quantity);
          fbb.addInt64(5, object.menuItem_id);
          fbb.addFloat64(8, object.price);
          fbb.addInt64(9, object.order.targetId);
          fbb.addInt64(10, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CartItemOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..content = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..quantity =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..menuItem_id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..price =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.order.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<CartItemOB>(
              object.menuItemOB,
              store,
              RelInfo<MenuItemOB>.toOneBacklink(
                  10, object.id, (MenuItemOB srcObject) => srcObject.cartItem));
          return object;
        }),
    VoucherOB: EntityDefinition<VoucherOB>(
        model: _entities[8],
        toOneRelations: (VoucherOB object) => [object.user, object.order],
        toManyRelations: (VoucherOB object) => {},
        getId: (VoucherOB object) => object.id,
        setId: (VoucherOB object, int id) {
          object.id = id;
        },
        objectToFB: (VoucherOB object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addFloat64(3, object.priceDeduct);
          fbb.addInt64(4, object.expiryDate?.millisecondsSinceEpoch);
          fbb.addBool(6, object.activated);
          fbb.addFloat64(7, object.priceDiscount);
          fbb.addInt64(10, object.user.targetId);
          fbb.addInt64(11, object.order.targetId);
          fbb.addInt64(12, object.voucher_id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final expiryDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = VoucherOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..priceDeduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..expiryDate = expiryDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(expiryDateValue)
            ..activated =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16)
            ..priceDiscount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 18)
            ..voucher_id = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 28);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.user.attach(store);
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.order.attach(store);
          return object;
        }),
    OrderOB: EntityDefinition<OrderOB>(
        model: _entities[9],
        toOneRelations: (OrderOB object) => [object.user],
        toManyRelations: (OrderOB object) => {
              RelInfo<CartItemOB>.toOneBacklink(
                      10, object.id, (CartItemOB srcObject) => srcObject.order):
                  object.cartItems,
              RelInfo<VoucherOB>.toOneBacklink(
                      12, object.id, (VoucherOB srcObject) => srcObject.order):
                  object.vouchers
            },
        getId: (OrderOB object) => object.id,
        setId: (OrderOB object, int id) {
          object.id = id;
        },
        objectToFB: (OrderOB object, fb.Builder fbb) {
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final deliveryAddressOffset = object.deliveryAddress == null
              ? null
              : fbb.writeString(object.deliveryAddress!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final specialRequestOffset = object.specialRequest == null
              ? null
              : fbb.writeString(object.specialRequest!);
          final packageStringOffset = object.packageString == null
              ? null
              : fbb.writeString(object.packageString!);
          final paymentMethodOffset = object.paymentMethod == null
              ? null
              : fbb.writeString(object.paymentMethod!);
          fbb.startTable(26);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.orderId);
          fbb.addInt64(2, object.eta);
          fbb.addOffset(3, statusOffset);
          fbb.addFloat64(4, object.locationLongitude);
          fbb.addFloat64(5, object.locationLatitude);
          fbb.addFloat64(6, object.totalPrice);
          fbb.addOffset(7, deliveryAddressOffset);
          fbb.addBool(8, object.onSitePickup);
          fbb.addInt64(9, object.user.targetId);
          fbb.addOffset(10, phoneNumberOffset);
          fbb.addOffset(11, specialRequestOffset);
          fbb.addOffset(13, packageStringOffset);
          fbb.addInt64(14, object.orderPlaced?.millisecondsSinceEpoch);
          fbb.addOffset(15, paymentMethodOffset);
          fbb.addFloat64(16, object.amount);
          fbb.addFloat64(17, object.sst);
          fbb.addFloat64(18, object.voucherDeduction);
          fbb.addFloat64(19, object.subtotal);
          fbb.addFloat64(20, object.deliveryFee);
          fbb.addFloat64(21, object.roundingAdjustment);
          fbb.addBool(22, object.active);
          fbb.addFloat64(23, object.appWalletDiscount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final orderPlacedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final object = OrderOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..orderId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..eta =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..locationLongitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..locationLatitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14)
            ..totalPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..deliveryAddress = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..onSitePickup =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..phoneNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..specialRequest = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..packageString = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..orderPlaced = orderPlacedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(orderPlacedValue)
            ..paymentMethod = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..amount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 36)
            ..sst = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 38)
            ..voucherDeduction = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 40)
            ..subtotal = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 42)
            ..deliveryFee = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 44)
            ..roundingAdjustment = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 46)
            ..active =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48)
            ..appWalletDiscount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 50);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<OrderOB>(
              object.cartItems,
              store,
              RelInfo<CartItemOB>.toOneBacklink(
                  10, object.id, (CartItemOB srcObject) => srcObject.order));
          InternalToManyAccess.setRelInfo<OrderOB>(
              object.vouchers,
              store,
              RelInfo<VoucherOB>.toOneBacklink(
                  12, object.id, (VoucherOB srcObject) => srcObject.order));
          return object;
        }),
    UserOB: EntityDefinition<UserOB>(
        model: _entities[10],
        toOneRelations: (UserOB object) => [],
        toManyRelations: (UserOB object) => {
              RelInfo<UserReview2OB>.toOneBacklink(5, object.id,
                  (UserReview2OB srcObject) => srcObject.user): object.reviews,
              RelInfo<OrderOB>.toOneBacklink(
                      10, object.id, (OrderOB srcObject) => srcObject.user):
                  object.orders,
              RelInfo<VoucherOB>.toOneBacklink(
                      11, object.id, (VoucherOB srcObject) => srcObject.user):
                  object.vouchers,
              RelInfo<CartItemOB>.toOneBacklink(
                      11, object.id, (CartItemOB srcObject) => srcObject.user):
                  object.cartItems
            },
        getId: (UserOB object) => object.id,
        setId: (UserOB object, int id) {
          object.id = id;
        },
        objectToFB: (UserOB object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final profileImageOffset = object.profileImage == null
              ? null
              : fbb.writeString(object.profileImage!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addInt64(4, object.birthday?.millisecondsSinceEpoch);
          fbb.addOffset(5, addressOffset);
          fbb.addOffset(6, profileImageOffset);
          fbb.addInt64(7, object.coins);
          fbb.addBool(8, object.guest);
          fbb.addBool(9, object.isLoggedIn);
          fbb.addOffset(10, phoneNumberOffset);
          fbb.addBool(11, object.newUser);
          fbb.addBool(12, object.setDefaultAddress);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final birthdayValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = UserOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..userId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..birthday = birthdayValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(birthdayValue)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..profileImage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..coins =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..guest =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..isLoggedIn =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22)
            ..phoneNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..newUser =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26)
            ..setDefaultAddress =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          InternalToManyAccess.setRelInfo<UserOB>(
              object.reviews,
              store,
              RelInfo<UserReview2OB>.toOneBacklink(
                  5, object.id, (UserReview2OB srcObject) => srcObject.user));
          InternalToManyAccess.setRelInfo<UserOB>(
              object.orders,
              store,
              RelInfo<OrderOB>.toOneBacklink(
                  10, object.id, (OrderOB srcObject) => srcObject.user));
          InternalToManyAccess.setRelInfo<UserOB>(
              object.vouchers,
              store,
              RelInfo<VoucherOB>.toOneBacklink(
                  11, object.id, (VoucherOB srcObject) => srcObject.user));
          InternalToManyAccess.setRelInfo<UserOB>(
              object.cartItems,
              store,
              RelInfo<CartItemOB>.toOneBacklink(
                  11, object.id, (CartItemOB srcObject) => srcObject.user));
          return object;
        }),
    UserReview2OB: EntityDefinition<UserReview2OB>(
        model: _entities[11],
        toOneRelations: (UserReview2OB object) => [object.user],
        toManyRelations: (UserReview2OB object) => {},
        getId: (UserReview2OB object) => object.id,
        setId: (UserReview2OB object, int id) {
          object.id = id;
        },
        objectToFB: (UserReview2OB object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final starsOffset =
              object.stars == null ? null : fbb.writeString(object.stars!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addOffset(2, starsOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addInt64(4, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserReview2OB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..message = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..stars = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.user.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FullNewsOB] entity fields to define ObjectBox queries.
class FullNewsOB_ {
  /// see [FullNewsOB.id]
  static final id =
      QueryIntegerProperty<FullNewsOB>(_entities[0].properties[0]);

  /// see [FullNewsOB.name]
  static final name =
      QueryStringProperty<FullNewsOB>(_entities[0].properties[1]);
}

/// [BannerNewsOB] entity fields to define ObjectBox queries.
class BannerNewsOB_ {
  /// see [BannerNewsOB.id]
  static final id =
      QueryIntegerProperty<BannerNewsOB>(_entities[1].properties[0]);

  /// see [BannerNewsOB.image]
  static final image =
      QueryStringProperty<BannerNewsOB>(_entities[1].properties[1]);

  /// see [BannerNewsOB.article]
  static final article =
      QueryStringProperty<BannerNewsOB>(_entities[1].properties[2]);
}

/// [AdditionDetailOB] entity fields to define ObjectBox queries.
class AdditionDetailOB_ {
  /// see [AdditionDetailOB.id]
  static final id =
      QueryIntegerProperty<AdditionDetailOB>(_entities[2].properties[0]);

  /// see [AdditionDetailOB.name]
  static final name =
      QueryStringProperty<AdditionDetailOB>(_entities[2].properties[1]);

  /// see [AdditionDetailOB.price]
  static final price =
      QueryDoubleProperty<AdditionDetailOB>(_entities[2].properties[2]);

  /// see [AdditionDetailOB.addition]
  static final addition = QueryRelationToOne<AdditionDetailOB, AdditionOB>(
      _entities[2].properties[3]);
}

/// [AdditionOB] entity fields to define ObjectBox queries.
class AdditionOB_ {
  /// see [AdditionOB.id]
  static final id =
      QueryIntegerProperty<AdditionOB>(_entities[3].properties[0]);

  /// see [AdditionOB.title]
  static final title =
      QueryStringProperty<AdditionOB>(_entities[3].properties[1]);

  /// see [AdditionOB.selectedPrice]
  static final selectedPrice =
      QueryDoubleProperty<AdditionOB>(_entities[3].properties[2]);

  /// see [AdditionOB.menuItem]
  static final menuItem =
      QueryRelationToOne<AdditionOB, MenuItemOB>(_entities[3].properties[3]);

  /// see [AdditionOB.selectedIndex]
  static final selectedIndex =
      QueryIntegerProperty<AdditionOB>(_entities[3].properties[4]);
}

/// [IngredientOB] entity fields to define ObjectBox queries.
class IngredientOB_ {
  /// see [IngredientOB.id]
  static final id =
      QueryIntegerProperty<IngredientOB>(_entities[4].properties[0]);

  /// see [IngredientOB.name]
  static final name =
      QueryStringProperty<IngredientOB>(_entities[4].properties[1]);

  /// see [IngredientOB.imagePath]
  static final imagePath =
      QueryStringProperty<IngredientOB>(_entities[4].properties[2]);

  /// see [IngredientOB.menuItem]
  static final menuItem =
      QueryRelationToOne<IngredientOB, MenuItemOB>(_entities[4].properties[3]);
}

/// [MenuItemOB] entity fields to define ObjectBox queries.
class MenuItemOB_ {
  /// see [MenuItemOB.id]
  static final id =
      QueryIntegerProperty<MenuItemOB>(_entities[5].properties[0]);

  /// see [MenuItemOB.imagePath]
  static final imagePath =
      QueryStringProperty<MenuItemOB>(_entities[5].properties[1]);

  /// see [MenuItemOB.title]
  static final title =
      QueryStringProperty<MenuItemOB>(_entities[5].properties[2]);

  /// see [MenuItemOB.price]
  static final price =
      QueryDoubleProperty<MenuItemOB>(_entities[5].properties[3]);

  /// see [MenuItemOB.category]
  static final category =
      QueryStringProperty<MenuItemOB>(_entities[5].properties[4]);

  /// see [MenuItemOB.description]
  static final description =
      QueryStringProperty<MenuItemOB>(_entities[5].properties[5]);

  /// see [MenuItemOB.available]
  static final available =
      QueryBooleanProperty<MenuItemOB>(_entities[5].properties[6]);

  /// see [MenuItemOB.cartItem]
  static final cartItem =
      QueryRelationToOne<MenuItemOB, CartItemOB>(_entities[5].properties[7]);
}

/// [UserReviewOB] entity fields to define ObjectBox queries.
class UserReviewOB_ {
  /// see [UserReviewOB.id]
  static final id =
      QueryIntegerProperty<UserReviewOB>(_entities[6].properties[0]);

  /// see [UserReviewOB.name]
  static final name =
      QueryStringProperty<UserReviewOB>(_entities[6].properties[1]);

  /// see [UserReviewOB.message]
  static final message =
      QueryStringProperty<UserReviewOB>(_entities[6].properties[2]);

  /// see [UserReviewOB.stars]
  static final stars =
      QueryIntegerProperty<UserReviewOB>(_entities[6].properties[3]);

  /// see [UserReviewOB.menuItem]
  static final menuItem =
      QueryRelationToOne<UserReviewOB, MenuItemOB>(_entities[6].properties[4]);
}

/// [CartItemOB] entity fields to define ObjectBox queries.
class CartItemOB_ {
  /// see [CartItemOB.id]
  static final id =
      QueryIntegerProperty<CartItemOB>(_entities[7].properties[0]);

  /// see [CartItemOB.image]
  static final image =
      QueryStringProperty<CartItemOB>(_entities[7].properties[1]);

  /// see [CartItemOB.name]
  static final name =
      QueryStringProperty<CartItemOB>(_entities[7].properties[2]);

  /// see [CartItemOB.content]
  static final content =
      QueryStringProperty<CartItemOB>(_entities[7].properties[3]);

  /// see [CartItemOB.quantity]
  static final quantity =
      QueryIntegerProperty<CartItemOB>(_entities[7].properties[4]);

  /// see [CartItemOB.menuItem_id]
  static final menuItem_id =
      QueryIntegerProperty<CartItemOB>(_entities[7].properties[5]);

  /// see [CartItemOB.price]
  static final price =
      QueryDoubleProperty<CartItemOB>(_entities[7].properties[6]);

  /// see [CartItemOB.order]
  static final order =
      QueryRelationToOne<CartItemOB, OrderOB>(_entities[7].properties[7]);

  /// see [CartItemOB.user]
  static final user =
      QueryRelationToOne<CartItemOB, UserOB>(_entities[7].properties[8]);
}

/// [VoucherOB] entity fields to define ObjectBox queries.
class VoucherOB_ {
  /// see [VoucherOB.id]
  static final id = QueryIntegerProperty<VoucherOB>(_entities[8].properties[0]);

  /// see [VoucherOB.image]
  static final image =
      QueryStringProperty<VoucherOB>(_entities[8].properties[1]);

  /// see [VoucherOB.priceDeduct]
  static final priceDeduct =
      QueryDoubleProperty<VoucherOB>(_entities[8].properties[2]);

  /// see [VoucherOB.expiryDate]
  static final expiryDate =
      QueryIntegerProperty<VoucherOB>(_entities[8].properties[3]);

  /// see [VoucherOB.activated]
  static final activated =
      QueryBooleanProperty<VoucherOB>(_entities[8].properties[4]);

  /// see [VoucherOB.priceDiscount]
  static final priceDiscount =
      QueryDoubleProperty<VoucherOB>(_entities[8].properties[5]);

  /// see [VoucherOB.user]
  static final user =
      QueryRelationToOne<VoucherOB, UserOB>(_entities[8].properties[6]);

  /// see [VoucherOB.order]
  static final order =
      QueryRelationToOne<VoucherOB, OrderOB>(_entities[8].properties[7]);

  /// see [VoucherOB.voucher_id]
  static final voucher_id =
      QueryIntegerProperty<VoucherOB>(_entities[8].properties[8]);
}

/// [OrderOB] entity fields to define ObjectBox queries.
class OrderOB_ {
  /// see [OrderOB.id]
  static final id = QueryIntegerProperty<OrderOB>(_entities[9].properties[0]);

  /// see [OrderOB.orderId]
  static final orderId =
      QueryIntegerProperty<OrderOB>(_entities[9].properties[1]);

  /// see [OrderOB.eta]
  static final eta = QueryIntegerProperty<OrderOB>(_entities[9].properties[2]);

  /// see [OrderOB.status]
  static final status =
      QueryStringProperty<OrderOB>(_entities[9].properties[3]);

  /// see [OrderOB.locationLongitude]
  static final locationLongitude =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[4]);

  /// see [OrderOB.locationLatitude]
  static final locationLatitude =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[5]);

  /// see [OrderOB.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[6]);

  /// see [OrderOB.deliveryAddress]
  static final deliveryAddress =
      QueryStringProperty<OrderOB>(_entities[9].properties[7]);

  /// see [OrderOB.onSitePickup]
  static final onSitePickup =
      QueryBooleanProperty<OrderOB>(_entities[9].properties[8]);

  /// see [OrderOB.user]
  static final user =
      QueryRelationToOne<OrderOB, UserOB>(_entities[9].properties[9]);

  /// see [OrderOB.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<OrderOB>(_entities[9].properties[10]);

  /// see [OrderOB.specialRequest]
  static final specialRequest =
      QueryStringProperty<OrderOB>(_entities[9].properties[11]);

  /// see [OrderOB.packageString]
  static final packageString =
      QueryStringProperty<OrderOB>(_entities[9].properties[12]);

  /// see [OrderOB.orderPlaced]
  static final orderPlaced =
      QueryIntegerProperty<OrderOB>(_entities[9].properties[13]);

  /// see [OrderOB.paymentMethod]
  static final paymentMethod =
      QueryStringProperty<OrderOB>(_entities[9].properties[14]);

  /// see [OrderOB.amount]
  static final amount =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[15]);

  /// see [OrderOB.sst]
  static final sst = QueryDoubleProperty<OrderOB>(_entities[9].properties[16]);

  /// see [OrderOB.voucherDeduction]
  static final voucherDeduction =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[17]);

  /// see [OrderOB.subtotal]
  static final subtotal =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[18]);

  /// see [OrderOB.deliveryFee]
  static final deliveryFee =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[19]);

  /// see [OrderOB.roundingAdjustment]
  static final roundingAdjustment =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[20]);

  /// see [OrderOB.active]
  static final active =
      QueryBooleanProperty<OrderOB>(_entities[9].properties[21]);

  /// see [OrderOB.appWalletDiscount]
  static final appWalletDiscount =
      QueryDoubleProperty<OrderOB>(_entities[9].properties[22]);
}

/// [UserOB] entity fields to define ObjectBox queries.
class UserOB_ {
  /// see [UserOB.id]
  static final id = QueryIntegerProperty<UserOB>(_entities[10].properties[0]);

  /// see [UserOB.userId]
  static final userId =
      QueryStringProperty<UserOB>(_entities[10].properties[1]);

  /// see [UserOB.name]
  static final name = QueryStringProperty<UserOB>(_entities[10].properties[2]);

  /// see [UserOB.email]
  static final email = QueryStringProperty<UserOB>(_entities[10].properties[3]);

  /// see [UserOB.birthday]
  static final birthday =
      QueryIntegerProperty<UserOB>(_entities[10].properties[4]);

  /// see [UserOB.address]
  static final address =
      QueryStringProperty<UserOB>(_entities[10].properties[5]);

  /// see [UserOB.profileImage]
  static final profileImage =
      QueryStringProperty<UserOB>(_entities[10].properties[6]);

  /// see [UserOB.coins]
  static final coins =
      QueryIntegerProperty<UserOB>(_entities[10].properties[7]);

  /// see [UserOB.guest]
  static final guest =
      QueryBooleanProperty<UserOB>(_entities[10].properties[8]);

  /// see [UserOB.isLoggedIn]
  static final isLoggedIn =
      QueryBooleanProperty<UserOB>(_entities[10].properties[9]);

  /// see [UserOB.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<UserOB>(_entities[10].properties[10]);

  /// see [UserOB.newUser]
  static final newUser =
      QueryBooleanProperty<UserOB>(_entities[10].properties[11]);

  /// see [UserOB.setDefaultAddress]
  static final setDefaultAddress =
      QueryBooleanProperty<UserOB>(_entities[10].properties[12]);
}

/// [UserReview2OB] entity fields to define ObjectBox queries.
class UserReview2OB_ {
  /// see [UserReview2OB.id]
  static final id =
      QueryIntegerProperty<UserReview2OB>(_entities[11].properties[0]);

  /// see [UserReview2OB.message]
  static final message =
      QueryStringProperty<UserReview2OB>(_entities[11].properties[1]);

  /// see [UserReview2OB.stars]
  static final stars =
      QueryStringProperty<UserReview2OB>(_entities[11].properties[2]);

  /// see [UserReview2OB.status]
  static final status =
      QueryStringProperty<UserReview2OB>(_entities[11].properties[3]);

  /// see [UserReview2OB.user]
  static final user =
      QueryRelationToOne<UserReview2OB, UserOB>(_entities[11].properties[4]);
}
