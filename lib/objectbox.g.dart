// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';
import 'models/bannernews.dart';
import 'models/fullnews.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7436886197857190181),
      name: 'NewsFull',
      lastPropertyId: const IdUid(2, 4993169361151491599),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5532487186583170030),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4993169361151491599),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1629771521425256600),
      name: 'TopBannerNews',
      lastPropertyId: const IdUid(3, 3215544481237852102),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1715983393606849435),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5899158864016677619),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3215544481237852102),
            name: 'article',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2897391873509332869),
      name: 'MenuItemMap',
      lastPropertyId: const IdUid(2, 4654279378717876603),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 100303502472173014),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4654279378717876603),
            name: 'map',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2233927649910431469),
      name: 'FullNewsOB',
      lastPropertyId: const IdUid(2, 7715956713455378040),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6188503905232759776),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7715956713455378040),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5510275982018042304),
      name: 'BannerNewsOB',
      lastPropertyId: const IdUid(3, 5105894957054602084),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1428098114543984777),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1462186012595256539),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5105894957054602084),
            name: 'article',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 5510275982018042304),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2203044326659519525],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3504729010156614603, 3048272364630595352],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    NewsFull: EntityDefinition<NewsFull>(
        model: _entities[0],
        toOneRelations: (NewsFull object) => [],
        toManyRelations: (NewsFull object) => {},
        getId: (NewsFull object) => object.id,
        setId: (NewsFull object, int id) {
          object.id = id;
        },
        objectToFB: (NewsFull object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NewsFull()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    TopBannerNews: EntityDefinition<TopBannerNews>(
        model: _entities[1],
        toOneRelations: (TopBannerNews object) => [],
        toManyRelations: (TopBannerNews object) => {},
        getId: (TopBannerNews object) => object.id,
        setId: (TopBannerNews object, int id) {
          object.id = id;
        },
        objectToFB: (TopBannerNews object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, articleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TopBannerNews()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..article = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    MenuItemMap: EntityDefinition<MenuItemMap>(
        model: _entities[2],
        toOneRelations: (MenuItemMap object) => [],
        toManyRelations: (MenuItemMap object) => {},
        getId: (MenuItemMap object) => object.id,
        setId: (MenuItemMap object, int id) {
          object.id = id;
        },
        objectToFB: (MenuItemMap object, fb.Builder fbb) {
          final mapOffset =
              object.map == null ? null : fbb.writeString(object.map!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MenuItemMap()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..map = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    FullNewsOB: EntityDefinition<FullNewsOB>(
        model: _entities[3],
        toOneRelations: (FullNewsOB object) => [],
        toManyRelations: (FullNewsOB object) => {},
        getId: (FullNewsOB object) => object.id,
        setId: (FullNewsOB object, int id) {
          object.id = id;
        },
        objectToFB: (FullNewsOB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FullNewsOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    BannerNewsOB: EntityDefinition<BannerNewsOB>(
        model: _entities[4],
        toOneRelations: (BannerNewsOB object) => [],
        toManyRelations: (BannerNewsOB object) => {},
        getId: (BannerNewsOB object) => object.id,
        setId: (BannerNewsOB object, int id) {
          object.id = id;
        },
        objectToFB: (BannerNewsOB object, fb.Builder fbb) {
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addOffset(2, articleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BannerNewsOB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..article = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [NewsFull] entity fields to define ObjectBox queries.
class NewsFull_ {
  /// see [NewsFull.id]
  static final id = QueryIntegerProperty<NewsFull>(_entities[0].properties[0]);

  /// see [NewsFull.name]
  static final name = QueryStringProperty<NewsFull>(_entities[0].properties[1]);
}

/// [TopBannerNews] entity fields to define ObjectBox queries.
class TopBannerNews_ {
  /// see [TopBannerNews.id]
  static final id =
      QueryIntegerProperty<TopBannerNews>(_entities[1].properties[0]);

  /// see [TopBannerNews.image]
  static final image =
      QueryStringProperty<TopBannerNews>(_entities[1].properties[1]);

  /// see [TopBannerNews.article]
  static final article =
      QueryStringProperty<TopBannerNews>(_entities[1].properties[2]);
}

/// [MenuItemMap] entity fields to define ObjectBox queries.
class MenuItemMap_ {
  /// see [MenuItemMap.id]
  static final id =
      QueryIntegerProperty<MenuItemMap>(_entities[2].properties[0]);

  /// see [MenuItemMap.map]
  static final map =
      QueryStringProperty<MenuItemMap>(_entities[2].properties[1]);
}

/// [FullNewsOB] entity fields to define ObjectBox queries.
class FullNewsOB_ {
  /// see [FullNewsOB.id]
  static final id =
      QueryIntegerProperty<FullNewsOB>(_entities[3].properties[0]);

  /// see [FullNewsOB.name]
  static final name =
      QueryStringProperty<FullNewsOB>(_entities[3].properties[1]);
}

/// [BannerNewsOB] entity fields to define ObjectBox queries.
class BannerNewsOB_ {
  /// see [BannerNewsOB.id]
  static final id =
      QueryIntegerProperty<BannerNewsOB>(_entities[4].properties[0]);

  /// see [BannerNewsOB.image]
  static final image =
      QueryStringProperty<BannerNewsOB>(_entities[4].properties[1]);

  /// see [BannerNewsOB.article]
  static final article =
      QueryStringProperty<BannerNewsOB>(_entities[4].properties[2]);
}
